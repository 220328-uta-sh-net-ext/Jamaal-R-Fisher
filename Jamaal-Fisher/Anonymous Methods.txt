//  An anonymous method is a method without a name. Anonymous methods in C# can be defined using the delegate keyword and can be assigned to a variable of delegate type.


public delegate void Print(int value);

static void Main(string[] args)
{
    Print print = delegate(int val)
	{ 
        Console.WriteLine("Inside Anonymous method. Value: {0}", val); 
    	};

    print(100);
}


//  Output
//  Inside Anonymous method. Value: 100








//  Anonymous methods can access variables defined in an outer function.


public delegate void Print(int value);

static void Main(string[] args)
{
    int i = 10;
    
    Print prnt = delegate(int val)
	{
        val += i;
        Console.WriteLine("Anonymous method: {0}", val); 
    	};

    prnt(100);
}


//  Output
//  Anonymous method: 110








//  Anonymous methods can also be passed to a method that accepts the delegate as a parameter.


public delegate void Print(int value);

class Program
{
    public static void PrintHelperMethod(Print printDel,int val)
    { 
        val += 10;
        printDel(val);
    }

    static void Main(string[] args)
    {
        PrintHelperMethod(delegate(int val) { Console.WriteLine("Anonymous method: {0}", val); }, 100);
    }
}


//  Output
//  Anonymous method: 110









// Anonymous methods can be used as event handlers.


saveButton.Click += delegate(Object o, EventArgs e)
{ 
    System.Windows.Forms.MessageBox.Show("Save Successfully!"); 
};











// The delegate operator creates an anonymous method that can be converted to a delegate type:

Func<int, int, int> sum = delegate (int a, int b) { return a + b; };
Console.WriteLine(sum(3, 4));

Console.WriteLine();







// When you use the delegate operator, you might omit the parameter list.
// If you do that, the created anonymous method can be converted to a delegate type with any list of parameters.
// That's the only functionality of anonymous methods that is not supported by lambda expressions.

Action greet = delegate { Console.WriteLine("Hello!"); };
greet();

Action<int, double> introduce = delegate { Console.WriteLine("This is world!"); };
introduce(42, 2.7);





/*

Benefits of Anonymous Methods:
Anonymous methods are used to define delegates and to write inline functions.
The benefit of anonymous methods is, improve development experience over using delegates. The main benefits of anonymous methods is to implement delegates with less code.


Limitations:
- It cannot contain jump statement like goto, break or continue.
- It cannot access ref or out parameter of an outer method.
- It cannot have or access unsafe code.
- It cannot be used on the left side of the is operator.
- A static anonymous method can't capture local variables or instance state from enclosing scopes.

*/