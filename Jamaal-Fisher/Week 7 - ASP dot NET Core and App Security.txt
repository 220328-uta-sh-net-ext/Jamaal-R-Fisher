Each year OWASP (the Open Web Application Security Project) publishes the top ten security vulnerabilities.
It represents a broad consensus about the most critical security risks to web applications.


TOP 10 WEB APPLICATION SECURITY RISKS
1. Broken Access Control
2. Cryptographic Failures
3. Injection
4. Insecure Design
5. Security Misconfiguration
6. Vulnerable and Outdated Components
7. Identification and Authentication Failures
8. Software and Data Integrity Failures
9. Security Logging and Monitoring Failures
10. Server-Side Request Forgery



Authentication is user's identity (username and password)
Authorization is access level to resources for User (like admin have all access but employee might have limited access)



User   --->  App Server  --->  Identity Providers

___________________________________________________________

Microsoft.AspNetCore.Authentication.JwtBearer

System.IdentityModel.Tokens.Jwt

_____________________________________________________________


Security of Web API

JWT (JSON Web Token)

IDaaS (Identity as a Service)


___________________________________________________________


var Config=builder.Configuration;

// Add services to the container.
//boiler plate code to configure security with JWT

builder.Services.AddAuthentication(options => {
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;

}).AddJwtBearer(o => {
    var key = Encoding.UTF8.GetBytes(Config["JWT:Key"]);
    o.SaveToken = true;
    o.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuerSigningKey = true,
        ValidIssuer = Config["JWT:Issuer"],
        ValidAudience = Config["JWT:Audience"],
        IssuerSigningKey = new SymmetricSecurityKey(key),
        ValidateLifetime = true,
        ValidateIssuer = true,
        ValidateAudience = true
    };
});